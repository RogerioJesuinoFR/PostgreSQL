Criando as relações:

CREATE TABLE CLIENTE(CLIENTE_ID INTEGER,
CLIENTE_NOME VARCHAR(50),
CLIENTE_END VARCHAR(50),
CLIENTE_END_CIDADE CHAR(20),
ESTADO_CODIGO VARCHAR(2),
CLIENTE_END_CEP VARCHAR(8),
CLIENTE_TELEFONE VARCHAR(10),
CLIENTE_PERC_DESCONTO DECIMAL (2,0)
);

CREATE TABLE PRODUTO(
PRODUTO_CODIGO SMALLINT,
PRODUTO_NOME VARCHAR(40),
PRODUTO_PRECO NUMERIC(5,2),
UE_PRODUTO_COD VARCHAR(3)
);

CREATE TABLE ESTADO(
ESTADO_CODIGO VARCHAR(2),
ESTADO_NOME VARCHAR(25)
);

CREATE TABLE PEDIDO(
PEDIDO_IDENTIFICACAO INTEGER,
PEDIDO_TIPO INTEGER,
CLIENTE_ID INTEGER,
PEDIDO_DATA_ENTRADA DATE,
PEDIDO_VALOR_TOTAL NUMERIC(7,2),
PEDIDO_DESCONTO NUMERIC(7,2),
PEDIDO_DT_EMBARQUE DATE
);

CREATE TABLE UE_PRODUTO(
UE_PRODUTO_COD CHAR(3),
UE_PRODUTO_DESCR VARCHAR(50)
);

CREATE TABLE ITEM(
PEDIDO_IDENTIFICACAO INTEGER,
PRODUTO_CODIGO SMALLINT,
ITEM_QUANTIDADE SMALLINT,
ITEM_VALOR_UNITARIO NUMERIC(5,2),
ITEM_VALOR_TOTAL NUMERIC(5,2)
);

ALTER TABLE CLIENTE
ADD CONSTRAINT cliente_pkey  PRIMARY KEY (CLIENTE_ID);

ALTER TABLE ESTADO
ADD CONSTRAINT estado_pkey PRIMARY KEY (ESTADO_CODIGO);

ALTER TABLE ITEM
ADD CONSTRAINT item_pkey PRIMARY KEY (PEDIDO_IDENTIFICACAO,PRODUTO_CODIGO);

ALTER TABLE PEDIDO
ADD CONSTRAINT pedido_pkey PRIMARY KEY (PEDIDO_IDENTIFICACAO);

ALTER TABLE PRODUTO
ADD CONSTRAINT produto_pkey PRIMARY KEY (PRODUTO_CODIGO);

ALTER TABLE UE_PRODUTO
ADD CONSTRAINT ue_produto_pkey PRIMARY KEY (UE_PRODUTO_COD);

ALTER TABLE CLIENTE
ADD CONSTRAINT cliente_estado_fk FOREIGN KEY (ESTADO_CODIGO)
REFERENCES ESTADO(ESTADO_CODIGO);

ALTER TABLE PEDIDO
ADD CONSTRAINT pedido_cliente_fk FOREIGN KEY (CLIENTE_ID)
REFERENCES CLIENTE(CLIENTE_ID);

ALTER TABLE PRODUTO
ADD CONSTRAINT produto_ueproduto_fk FOREIGN KEY (UE_PRODUTO_COD)
REFERENCES UE_PRODUTO(UE_PRODUTO_COD);

ALTER TABLE ITEM
ADD CONSTRAINT item_produto_fk FOREIGN KEY (PRODUTO_CODIGO)
REFERENCES PRODUTO(PRODUTO_CODIGO);

===========================================================================================================

Inserindo Dados nas tabelas:

INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('GO', 'Goias');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('MT', 'Mato Grosso');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('RJ', 'Rio de Janeiro');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('PR', 'Paraná');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('SC', 'Santa Catarina');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('RS', 'Rio Grande do Sul');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('MS', 'Mato Grosso do Sul');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('PI', 'Piauí');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('PA', 'Pará');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('RN', 'Rio Grande do Norte');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('BA', 'Bahia');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('PB', 'Paraiba');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('MG', 'Minas Gerais');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('AP', 'Amapá');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('RO', 'Rondonia');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('RR', 'Roraima');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('SE', 'Sergipe');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('AC', 'Acre');
INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('SP', 'São Paulo');
INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (1, 'João', 'Rua dos Bobos', 'Foz do Iguaçu', 'PR', '8585555', '99999999', 15);
INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (2, 'Maria', 'Rua das Violetas', 'Rio de Janeiro', 'RJ', '9985845', '11111111', 10);
INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (3, 'Marcos', 'Rua sem nome', 'São Joaquim', 'MT', '9874541', '22222222', 0);
INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (4, 'Fernanda', 'Rua qualquer', 'São Carlos', 'SP', '3994832', '33333333', 12);
INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (5, 'Jussara', 'Travessa aquela lá', 'Campo Grande', 'MS', '6904993', '44444444', 18);
INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (6, 'Pedro', 'Travessa do padre', 'Natal', 'RN', '69098793', '44444444', 15);
INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (7, 'Valdir', 'Rua dos desesperados', 'Curitiba', 'PR', '6343993', '448889444', 20);
INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (8, 'Ana', 'Avenida Jucelino', 'Ponta Grossa', 'PR', '69989893', '98944444', 25);
INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (9, 'Bruna', 'Avenida Salgado Filho', 'Florianopolis', 'SC', '89898893', '09094444', 40);
INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (10, 'Filomena', 'Avenida Calvario', 'Porto Alegre', 'RS', '68798989', '98744444', 30);
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('ARR', 'ARROZ');
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('FEI', 'FEIJÃO');
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('MAC', 'MACARRÃO');
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('LET', 'LEITE');
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('ACU', 'AÇUCAR');
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('TRI', 'TRIGO');
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('OLE', 'OLEO');
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('MAR', 'MARGARINA');
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('SAB', 'SABÃO');
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('SUC', 'SUCO');
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('SAL', 'SAL');
INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('DET', 'DETERGENT');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (1, 'ARROZ BRANCO', 2.5, 'ARR');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (2, 'FEIJÃO CARIOCA', 3.8, 'FEI');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (3, 'FEIJÃO PRETO', 3.2, 'FEI');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (4, 'MACARRÃO INSTANTÂNEO', 1.2, 'MAC');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (5, 'LEITE INTEGRAL', 1.5, 'LET');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (6, 'SABÃO EM PÓ', 3.0, 'SAB');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (7, 'SUCO EM PÓ', 0.8, 'SUC');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (8, 'DETERGENTE PIA', 3.5, 'DET');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (9, 'MARGARINA COM SAL', 4.0, 'MAR');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (10, 'SAL IODADO', 2.5, 'SAL');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (11, 'TRIGO EM PÓ', 5.0, 'TRI');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (12, 'AÇUCAR REFINADO', 2.6, 'ACU');
INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (13, 'OLEO DE SOJA', 3.4, 'OLE');
INSERT INTO PEDIDO (PEDIDO_IDENTIFICACAO, PEDIDO_TIPO, CLIENTE_ID, PEDIDO_DATA_ENTRADA, PEDIDO_VALOR_TOTAL, PEDIDO_DESCONTO, PEDIDO_DT_EMBARQUE) VALUES (1, 5, 1, '2005-11-11', 28, 0, '2005-11-13');
INSERT INTO PEDIDO (PEDIDO_IDENTIFICACAO, PEDIDO_TIPO, CLIENTE_ID, PEDIDO_DATA_ENTRADA, PEDIDO_VALOR_TOTAL, PEDIDO_DESCONTO, PEDIDO_DT_EMBARQUE) VALUES (2, 3, 2, '2005-11-11', 300, 5, '2005-11-11');
INSERT INTO PEDIDO (PEDIDO_IDENTIFICACAO, PEDIDO_TIPO, CLIENTE_ID, PEDIDO_DATA_ENTRADA, PEDIDO_VALOR_TOTAL, PEDIDO_DESCONTO, PEDIDO_DT_EMBARQUE) VALUES (3, 5, 1, '2014-12-18', 450, 20, '2014-12-22');
INSERT INTO PEDIDO (PEDIDO_IDENTIFICACAO, PEDIDO_TIPO, CLIENTE_ID, PEDIDO_DATA_ENTRADA, PEDIDO_VALOR_TOTAL, PEDIDO_DESCONTO, PEDIDO_DT_EMBARQUE) VALUES (4, 5, 1, '2013-08-20', 1000, 0, '2013-09-25');
INSERT INTO PEDIDO (PEDIDO_IDENTIFICACAO, PEDIDO_TIPO, CLIENTE_ID, PEDIDO_DATA_ENTRADA, PEDIDO_VALOR_TOTAL, PEDIDO_DESCONTO, PEDIDO_DT_EMBARQUE) VALUES (5, 3, 9, '2012-03-30', 700, 10, '2012-04-13');
INSERT INTO PEDIDO (PEDIDO_IDENTIFICACAO, PEDIDO_TIPO, CLIENTE_ID, PEDIDO_DATA_ENTRADA, PEDIDO_VALOR_TOTAL, PEDIDO_DESCONTO, PEDIDO_DT_EMBARQUE) VALUES (6, 3, 10, '2011-05-15', 120, 15, '2011-11-13');
INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (1, 1, 7, 4, 28);
INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (2, 3, 50, 2, 100);
INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (3, 1, 50, 4, 200);
INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (4, 1, 100, 4, 400);
INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (5, 2, 7, 4, 28);
INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (6, 3, 50, 2, 100);
INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (7, 4, 50, 4, 200);
INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (8, 5, 100, 2.5, 250);

===========================================================================================================

1) Criar uma stored procedure na qual seja informado o código de um produto e a mesma retorna sua descrição. Faça o tratamento caso seja informado o código de um produto que não esteja cadastrado.

CREATE OR REPLACE FUNCTION descreveProduto(INTEGER) RETURNS TEXT AS $$
DECLARE
    cod_produto ALIAS FOR $1;
    nome produto.produto_nome%TYPE;
BEGIN
    SELECT INTO nome produto_nome from produto WHERE produto_codigo=codigo_produto;
    IF NOT FOUND THEN
        RETURN 'Produto não encontrado';
    ELSE
        RETURN 'Produto:' || nome || ' retornado conforme código ' || cod_produto;
    END IF;
END;
$$ LANGUAGE plpgsql;

===========================================================================================================

2) Faça uma procedure que realize a inserção de um novo estado assim como sua sigla, recebendo estas informações do usuário. Caso o estado ja esteja presente, apresente uma mensagem condizente e também trate o tamanho máximo de caracteres da sigla.

CREATE OR REPLACE FUNCTION insereEstado (VARCHAR(2), VARCHAR(60)) RETURN VOID AS $$
DECLARE
    SIGLA ALIAS FOR $1;
    ESTADO ALIAS FOR $2;
BEGIN
    INSERT INTO ESTADO (estado_codigo, estado_nome) VALUES (SIGLA, ESTADO);
    EXCEPTION
        WHEN unique_violation
        THEN
            RAISE NOTICE 'Erro de violação de integridade';
        WHEN string_data_right_truncation
        THEN
            RAISE NOTICE 'Número máximo de caracteres excedido';
END;
$$ LANGUAGE plpgsql;

===========================================================================================================

3) Faça uma stored procedure que analisa os preços dos produtos armazenados e efetua um aumento de 10% caso o seu valor seja menor que 2.00. Retorne sobre quantos produtos a ação foi efetivada.

CREATE OR REPLACE FUNCTION atualizaPrecosProdutos () RETURNS TEXT AS $$
DECLARE
    cod_produto produto.produto_codigo%TYPE;
    contador INTEGER := 0;
BEGIN
    FOR cod_produto IN SELECT procuto_codigo FROM produto WHERE produto_preco < 2 LOOP
        contador := contador + 1;
        UPDATE produto SET
            produto_preco = produto_preco + (produto_preco * 0.10) WHERE produto_codigo = cod_produto;
    END LOOP;
    RETURN 'Foram alterados ' || contador || ' registros com sucesso';
END
$$LANGUAGE plpgsql;

===========================================================================================================

4) Criar uma stored procedure para retornar o nome dos clientes e o seu respectivo percentual de desconto de acordo com o estado fornecido. Caso nenhum registro seja encontrado apresentar mensagem; retorne tipo Record.

CREATE OR REPLACE FUNCTION CLIENTE_DESCONTO (VARCHAR (25)) RETURN setof text AS $$
DECLARE
    reg RECORD;
BEGIN
    FOR reg IN SELECT cliente.cliente_nome, cliente.CLIENTE_PERC_DESCONTO
    FROM cliente, estado WHERE cliente.estado_codigo = estado.estado_codigo AND estado.estado_nome = $1 LOOP
        return next reg;
    END LOOP;
    IF NOT FOUND THEN
        RAISE NOTICE 'Nenhum registro encontrado!';
    END IF;
END;
$$ LANGUAGE plpgsql;

===========================================================================================================

5) Faça o mesmo exercício anterior utilizando um cursor.

CREATE OR REPLACE FUNCTION CLIENTE_DESCONTO_CURSOR (VARCHAR (25)) RETURNS SETOF TEXT AS $$
DECLARE
    dados refcursor;
    nomecliente cliente.cliente_nome%type;
    clientedesconto cliente.cliente_perc_desconto%type;
    cont integer := 0;
BEGIN
    OPEN dados FOR SELECT cliente.cliente_nome, cliente.cliente_perc_desconto FROM cliente, estado WHERE cliente.estado_codigo = estado.estado_codigo AND estado.estado_nome = $1;
    LOOP
        FETCH dados INTO nomecliente, clientedesconto;
        IF NOT FOUND THEN
            EXIT;
        END IF;
        cont := cont + 1;
        RETURN NEXT nomecliente || ', ' || clientedesconto;
    END LOOP;
    IF (cont = 0) THEN
        RAISE NOTICE 'Nenhum registro encontrado';
    END IF;
    CLOSE dados;
END
$$ LANGUAGE plpgsql;

===========================================================================================================

6) Faça uma stored procedure que retorna cursor. A mesma deve popular um cursor com todas as linhas e atributos da relação cliente. Logo após faça a chamada à procedure e realize a navegação no cursor exibindo:
- A última linha do cursor;
- A primeira linha do cursor;
- 2 posições adiante da enterior (primeira);
- Exatamente a quarta posição do cursor;

Por fim, feche o cursor e dê o "commit" na transação.

CREATE OR REPLACE FUNCTION lista_cliente(refcursor) RETURNS refcursor AS $$
BEGIN
    OPEN $1 FOR SELECT * FROM cliente;
    RETURN $1;
END;
$$ LANGUAGE plpgsql;

BEGIN;
    SELECT lista_clientes('meucursor');
    FETCH LAST IN meucursor;
    FETCH FIRST IN meucursor;
    FETCH RELATIVE 2 IN meucursor;
    FETCH ABSOLUTE 4 IN meucursor;
CLOSE meucursor;
COMMIT;

===========================================================================================================

7) Desenvolva uma procedure que crie dinamicamente uma tabela somente com os campos cliente_id, cliente_nome e cliente_telefone da tabela cliente.
Popule-a com tuplas oriundas da tabela cliente com restrição pelo atributo cliente_perc_desconto e valor estipulado pelo usuário.

CREATE OR REPLACE FUNCTION cria_tabela (INTEGER) RETURNS VOID AS $$
BEGIN
    CREATE TABLE nova_cliente AS SELECT cliente_id, cliente_nome, cliente_telefone FROM cliente WHERE cliente_perc_desconto <= $1;
    RAISE NOTICE 'Tabela criada com sucesso!';
END;
$$ LANGUAGE plpgsql;