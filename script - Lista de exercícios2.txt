1) faça uma stored procedure que calcule e imprima na tela o volume de uma lata de óleo, usando a fórmula V=R^2 * A, onde "R" é o raio da lata e "A" é a altura. O usuário deverá passar como parâmetro o comprimento e a altura da lata.

CREATE OR REPLACE FUNCTION calculaVolume (COMPRIMENTO REAL, ALTURA REAL) RETURNS REAL AS $$
DECLARE
    VOLUME REAL:= 0;
BEGIN
    VOLUME := R*R * ALTURA;
    RETURN VOLUME;
END;
$$ LANGUAGE plpgsql;

==========================================================================================================

2) Faça uma stored procedure que recebe um número inteiro como párâmetro, e imprima na tela se o valor é par ou ímpar.

CREATE OR REPLACE FUNCTION verificaImpar (N INTEGER) RETURN TEXT AS $$
BEGIN
    IF (N % 2) = 0 THEN
        RETURN 'O NÚMERO É PAR';
    ELSE
        RETURN 'O NÚMERO É ÍMPAR';
    END IF;
END;
$$ LANGUAGE plpgsql;

==========================================================================================================

3) Escreva uma stored procedure que recebe as coordenadas (X, Y) de um ponto no sistema cartesiano e escreve o quadrante ao qual o ponto pertence. Caso o ponto não pertença a nenhum quadrante, escrever se ele está sobre o eixo X, eixo Y ou na origem.

CREATE OR REPLACE FUNCTION coordenadas (X INTEGER, Y INTEGER) RETURN TEXT AS $$
BEGIN
    IF (X = 0 AND Y = 0)THEN
        RETURN 'O PONTO ESTÁ NA ORIGEM';
    ELSIF (X > 0 AND Y > 0) THEN
        RETURN 'O PONTO ESTÁ NO PRIMEIRO QUADRANTE';
    ELSIF (X < 0 AND Y > 0) THEN
        RETURN 'O PONTO ESTÁ NO SEGUNDO QUADRANTE';
    ELSIF (X < 0 AND Y < 0) THEN
        RETURN 'O PONTO ESTÁ NO TERCEIRO QUADRANTE';
    ELSIF (X > 0 AND Y < 0) THEN
        RETURN 'O PONTO ESTÁ NO QUARTO QUADRANTE';
    ELSIF (X = 0 AND Y <> 0) THEN
        RETURN 'O PONTO ESTÁ SOBRE O EIXO Y';
    ELSE
        RETURN 'O PONTO ESTÁ SOBRE O EIXO X';
    END IF;
END;
$$ LANGUAGE plpgsql;

==========================================================================================================

4) Criar uma stored procedure que recebe o preço e a categoria de um produto. Calcular o reajuste de acordo com a categoria: se a mesma for A=50%, B=25%, C=15% e outras 5%. Depois mostre o valor antigo, o percentual de reajuste e o valor reajustado.

CREATE OR REPLACE FUNCTION reajuste (P REAL, CATEGORIA CHAR(1)) RETURNS VOID AS $$
DECLARE
    VALORFINAL REAL := 0;
BEGIN
    CASE CATEGORIA
        WHEN 'A' THEN
            VALORFINAL := P * 1.5;
            RAISE NOTICE 'O valor do produto antes do reajuste era: %. Apos o reajuste de 50% na categoria % é de: %.', P, CATEGORIA, VALORFINAL;
        WHEN 'B' THEN
            VALORFINAL := P * 1.25;
            RAISE NOTICE 'O valor do produto antes do reajuste era: %. Apos o reajuste de 25% na categoria % é de: %.', P, CATEGORIA, VALORFINAL;
        WHEN 'C' THEN
            VALORFINAL := P * 1.15;
            RAISE NOTICE 'O valor do produto antes do reajuste era: %. Apos o reajuste de 15% na categoria % é de: %.', P, CATEGORIA, VALORFINAL;
        ELSE
            VALORFINAL := P * 1.05;
            RAISE NOTICE 'O valor do produto antes do reajuste era: %. Apos o reajuste de 5% na categoria % é de: %.', P, CATEGORIA, VALORFINAL;
    END CASE;
END;
$$ LANGUAGE plpgsql;

==========================================================================================================

5) A conversão de graus farenheit para centígrados é obtida por C = 5/9(F - 32)
Fazer uma stored procedure que calcule e escreva uma tabela de centígrados em função de graus farenheit, que variam de 50 a 150 de 1 em 1.

CREATE OR REPLACE FUNCTION calculaGraus () RETURNS VOID AS $$
DECLARE
    C INTEGER := 0;
    F INTEGER := 50;
BEGIN
    LOOP
        IF F > 150 THEN
            EXIT;
        ELSE
            C:= 5/9(F - 32); 
            RAISE NOTICE 'Farenheit % - Celsius %', F, C;
            F:= F+1;
    END LOOP
END;
$$ LANGUAGE plpgsql;

==========================================================================================================

6) Faça uma stored procedure que calcule e apresente a tabuada de um número inteiro passado como parâmetro

CREATE OR REPLACE FUNCTION apresentaTabuada (N INTEGER) RETURN VOID AS $$
BEGIN
    FOR I IN 1..10 LOOP
        RAISE NOTICE '% x % = %', N, I, N*I;
    END LOOP;
END
$$ LANGUAGE plpgsql;

==========================================================================================================

7) Faça uma stored procedure que calcule e apresente o resultado de um número inteiro elevado a outro número inteiro passado como parâmetro. Desenvolva sua própria função de cálculo de potência.

CREATE OR REPLACE FUNCTION potencia (N INTEGER, POT INTEGER) RETURN VOID AS $$
DECLARE
    RESULT:= 1;
BEGIN
    WHILE POT > 0 LOOP
        RESULT:= RESULT*N;
        POT:= POT-1;
    END LOOP;
RETURN RESULT;
END;
$$ LANGUAGE plpgsql;