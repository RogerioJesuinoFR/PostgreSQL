Criação das relações:

	CREATE TABLE CLIENTE(CLIENTE_ID INTEGER,
	CLIENTE_NOME VARCHAR(50),
	CLIENTE_END VARCHAR(50),
	CLIENTE_END_CIDADE CHAR(20),
	ESTADO_CODIGO VARCHAR(2),
	CLIENTE_END_CEP VARCHAR(8),
	CLIENTE_TELEFONE VARCHAR(10),
	CLIENTE_PERC_DESCONTO DECIMAL (2,0)
	);
	
	CREATE TABLE PRODUTO(
	PRODUTO_CODIGO SMALLINT,
	PRODUTO_NOME VARCHAR(40),
	PRODUTO_PRECO NUMERIC(5,2),
	UE_PRODUTO_COD VARCHAR(3)
	);
	
	CREATE TABLE ESTADO(
	ESTADO_CODIGO VARCHAR(2),
	ESTADO_NOME VARCHAR(25)
	);
	
	CREATE TABLE PEDIDO(
	PEDIDO_IDENTIFICACAO INTEGER,
	PEDIDO_TIPO INTEGER,
	CLIENTE_ID INTEGER,
	PEDIDO_DATA_ENTRADA DATE,
	PEDIDO_VALOR_TOTAL NUMERIC(7,2),
	PEDIDO_DESCONTO NUMERIC(7,2),
	PEDIDO_DT_EMBARQUE DATE
	);
	
	CREATE TABLE UE_PRODUTO(
	UE_PRODUTO_COD CHAR(3),
	UE_PRODUTO_DESCR VARCHAR(50)
	);
	
	CREATE TABLE ITEM(
	PEDIDO_IDENTIFICACAO INTEGER,
	PRODUTO_CODIGO SMALLINT,
	ITEM_QUANTIDADE SMALLINT,
	ITEM_VALOR_UNITARIO NUMERIC(5,2),
	ITEM_VALOR_TOTAL NUMERIC(5,2)
	);
	
	ALTER TABLE CLIENTE
	ADD CONSTRAINT cliente_pkey  PRIMARY KEY (CLIENTE_ID);
	
	ALTER TABLE ESTADO
	ADD CONSTRAINT estado_pkey PRIMARY KEY (ESTADO_CODIGO);
	
	ALTER TABLE ITEM
	ADD CONSTRAINT item_pkey PRIMARY KEY (PEDIDO_IDENTIFICACAO,PRODUTO_CODIGO);
	
	ALTER TABLE PEDIDO
	ADD CONSTRAINT pedido_pkey PRIMARY KEY (PEDIDO_IDENTIFICACAO);
	
	ALTER TABLE PRODUTO
	ADD CONSTRAINT produto_pkey PRIMARY KEY (PRODUTO_CODIGO);
	
	ALTER TABLE UE_PRODUTO
	ADD CONSTRAINT ue_produto_pkey PRIMARY KEY (UE_PRODUTO_COD);
	
	ALTER TABLE CLIENTE
	ADD CONSTRAINT cliente_estado_fk FOREIGN KEY (ESTADO_CODIGO)
	REFERENCES ESTADO(ESTADO_CODIGO);
	
	ALTER TABLE PEDIDO
	ADD CONSTRAINT pedido_cliente_fk FOREIGN KEY (CLIENTE_ID)
	REFERENCES CLIENTE(CLIENTE_ID);
	
	ALTER TABLE PRODUTO
	ADD CONSTRAINT produto_ueproduto_fk FOREIGN KEY (UE_PRODUTO_COD)
	REFERENCES UE_PRODUTO(UE_PRODUTO_COD);
	
	ALTER TABLE ITEM
	ADD CONSTRAINT item_produto_fk FOREIGN KEY (PRODUTO_CODIGO)
	REFERENCES PRODUTO(PRODUTO_CODIGO);

	CREATE TABLE produto_aux (produto_aux_nome VARCHAR(40),
	produto_aux_preco numeric(5,2));

	CREATE TABLE ue_produto_aux (ue_produto_aux_descr Varchar(50));

=======================================================================

Criação de chave primária para duas tabelas através do comando alter table:

- PK de UE_PRODUTO_AUX é ue_produto_aux_codigo CHAR(3);

	ALTER TABLE ue_produto_aux
	ADD COLUMN ue_produto_aux_codigo CHAR(3),
	ADD CONSTRAINT ue_produto_aux_pkey PRIMARY KEY (ue_produto_aux_codigo);

- PK de PRODUTO_AUX é produto_aux_codigo SERIAL;

	ALTER TABLE produto_aux
	ADD COLUMN produto_aux_codigo SERIAL
	ADD CONSTRAINT produto_aux_pkey PRIMARY KEY (produto_aux_codigo);

=======================================================================

Criação de chave estrangeira da tabela PRODUTO_AUX apontando para a tabela UE_PRODUTO_AUX,
com integridade referencial CASCADE para exclusãp e atualização:

	ALTER TABLE produto_aux
	ADD COLUMN ue_produto_aux_codigo VARCHAR(3) NOT NULL,
	ADD CONTRAINT produto_aux_fkey FOREIGN KEY (ue_produto_aux_codigo) REFERENCES
	ue_produto_aux (ue_produto_aux_codigo)
	ON DELETE CASCADE
	ON UPDATE CASCADE;

=======================================================================

Ciração de indice único na tabela PRODUTO_AUX para a coluna produto_aux_nome

	CREATE UNIQUE INDEX indice_produto_nome
	ON produto_aux(produto_aux_nome);

=======================================================================

Inserindo Dados no Banco:

	INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('AC', 'Acre');
	INSERT INTO ESTADO (ESTADO_CODIGO, ESTADO_NOME) VALUES ('SP', 'São Paulo');
	INSERT INTO estado (ESTADO_CODIGO, ESTADO_NOME) VALUES ('RJ', 'Rio de Janeiro');
	INSERT INTO estado (ESTADO_CODIGO, ESTADO_NOME) VALUES ('PR', 'Paraná');
	INSERT INTO estado (ESTADO_CODIGO, ESTADO_NOME) VALUES ('SC', 'Santa Catarina');
	INSERT INTO estado (ESTADO_CODIGO, ESTADO_NOME) VALUES ('RS', 'Rio Grande do Sul');
	INSERT INTO estado (ESTADO_CODIGO, ESTADO_NOME) VALUES ('MT', 'Mato Grosso');
	INSERT INTO estado (ESTADO_CODIGO, ESTADO_NOME) VALUES ('MS', 'Mato Grosso do Sul');
	INSERT INTO estado (ESTADO_CODIGO, ESTADO_NOME) VALUES ('PI', 'Piauí');
	INSERT INTO estado (ESTADO_CODIGO, ESTADO_NOME) VALUES ('PA', 'Pará');


	INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (1, 'João', 'Rua dos Bobos', 'Foz do Iguaçu', 'PR', '8585555', '99999999', 15);
	INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (2, 'Maria', 'Rua das Violetas', 'Rio de Janeiro', 'RJ', '9985845', '11111111', 10);
	INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (3, 'Marcos', 'Rua sem nome', 'São Joaquim', 'MT', '9874541', '22222222', 0);
	INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (4, 'Fernanda', 'Rua qualquer', 'São Carlos', 'SP', '3994832', '33333333', 12);
	INSERT INTO CLIENTE (CLIENTE_ID, CLIENTE_NOME, CLIENTE_END, CLIENTE_END_CIDADE, ESTADO_CODIGO, CLIENTE_END_CEP, CLIENTE_TELEFONE, CLIENTE_PERC_DESCONTO) VALUES (5, 'Jussara', 'Travessa aquela lá', 'Campo Grande', 'MS', '6904993', '44444444', 18);
	
	
	INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('ARR', 'ARROZ');
	INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('FEI', 'FEIJÃO');
	INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('MAC', 'MACARRÃO');
	INSERT INTO UE_PRODUTO (UE_PRODUTO_COD, UE_PRODUTO_DESCR) VALUES ('LET', 'LEITE');
	
	
	INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (1, 'ARROZ BRANCO', 2.5, 'ARR');
	INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (2, 'FEIJÃO CARIOCA', 3.8, 'FEI');
	INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (3, 'FEIJÃO PRETO', 3.2, 'FEI');
	INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (4, 'MACARRÃO INSTANTÂNEO', 1.2, 'MAC');
	INSERT INTO PRODUTO (PRODUTO_CODIGO, PRODUTO_NOME, PRODUTO_PRECO, UE_PRODUTO_COD) VALUES (5, 'LEITE INTEGRAL', 1.5, 'LET');
	
	
	INSERT INTO PEDIDO (PEDIDO_IDENTIFICACAO, PEDIDO_TIPO, CLIENTE_ID, PEDIDO_DATA_ENTRADA, PEDIDO_VALOR_TOTAL, PEDIDO_DESCONTO, PEDIDO_DT_EMBARQUE) VALUES (1, 5, 1, '2005-11-11', 28, 0, '2005-11-13');
	INSERT INTO PEDIDO (PEDIDO_IDENTIFICACAO, PEDIDO_TIPO, CLIENTE_ID, PEDIDO_DATA_ENTRADA, PEDIDO_VALOR_TOTAL, PEDIDO_DESCONTO, PEDIDO_DT_EMBARQUE) VALUES (2, 3, 2, '2005-11-11', 300, 5, '2005-11-11');
	INSERT INTO PEDIDO (PEDIDO_IDENTIFICACAO, PEDIDO_TIPO, CLIENTE_ID, PEDIDO_DATA_ENTRADA, PEDIDO_VALOR_TOTAL, PEDIDO_DESCONTO, PEDIDO_DT_EMBARQUE) VALUES (3, 5, 1, '2005-12-18', 450, 20, '2005-12-22');
	
	
	INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (1, 1, 7, 4, 28);
	INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (2, 3, 50, 2, 100);
	INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (3, 1, 50, 4, 200);
	INSERT INTO ITEM (PEDIDO_IDENTIFICACAO, PRODUTO_CODIGO, ITEM_QUANTIDADE, ITEM_VALOR_UNITARIO, ITEM_VALOR_TOTAL) VALUES (4, 1, 100, 2.5, 250);
	
	
	INSERT INTO UE_PRODUTO_aux (UE_PRODUTO_aux_CODIGO, UE_PRODUTO_aux_DESCR) VALUES ('ARR', 'ARROZ');
	INSERT INTO UE_PRODUTO_aux (UE_PRODUTO_aux_CODIGO, UE_PRODUTO_aux_DESCR) VALUES ('FEI', 'FEIJÃO');
	INSERT INTO UE_PRODUTO_aux (UE_PRODUTO_aux_CODIGO, UE_PRODUTO_aux_DESCR) VALUES ('MAC', 'MACARRÃO');
	INSERT INTO UE_PRODUTO_aux (UE_PRODUTO_aux_CODIGO, UE_PRODUTO_aux_DESCR) VALUES ('LET', 'LEITE');

=======================================================================================================================

Copiando cada registro da tabela PRODUTO e inserindo na tabela PRODUTO_AUX:

	INSERT INTO produto_aux (produto_aux_nome, produto_aux_preco, ue_produto_aux_codigo)
	SELECT produto_nome, produto_preco, ue_produto_cod
	FROM produto;

=======================================================================================================================

Alterando os preços na tabela PRODUTO, aplicando um aumento de 50% sobre o preço, somente
para os produtos cujo preço for menor que R$ 2,00:

	UPDATE produto
	SET produto_preco = produto_preco * 1.5
	WHERE produto_preco < 2;

=======================================================================================================================

Excluindo da tabela PRODUTO_AUX o produto cujo código seja igual a FEI;

	DELETE FROM produto_aux
	WHERE ue_produto_aux_codigo = 'FEI';

=======================================================================================================================

Selecionando as colunas dos cliente de maneira distinta (cidade, estado e cep):

	SELECT DISTINCT cliente_end_cidade, estado_codigo, cliente_end_cep
	FROM cliente;

=======================================================================================================================

Selecionando todos os pedidos cujo valor total seja menor que 100 ou maior que 500:

	SELECT *
	FROM pedido
	WHERE pedido_valor_total < 100 OR pedido_valor_total > 500;

=======================================================================================================================

Selecionando todos os pedidos cuja data de entrada seja = 11/11/2005 e cujo valor total esteja entre 20 e 50:

	SELECT *
	FROM pedido
	WHERE pedido_data_entrega = '11/11/2005'
	AND (pedido_valor_total BETWEEN 20 AND 50);

=======================================================================================================================

Selecionando todos os produtos cujo nome comece com C ou F ou M, independente do resto:

	SELECT *
	FROM produto
	WHERE produto_nome LIKE 'C%'
	OR produto_nome LIKE 'F%'
	OR produto_nome LIKE 'M%';

=======================================================================================================================

Selecionando todos os produtos cujo nome possua a string 'A_R' como parte do nome do
produto, em qualquer posição do nome:

	SELECT *
	FROM produto
	WHERE produto_nome LIKE '%A_R%';

=======================================================================================================================

Selecionando todos os clientes cujo estado não seja RJ nem SP:

	SELECT *
	FROM cliente
	WHERE estado_codigo NOT LIKE 'RJ'
	OR estado_codigo NOT LIKE 'SP';

=======================================================================================================================

Selecionando todos os produtos cujo preço seja menor que 20 e a unidade de estoque seja
'LEITE' ou 'FEIJAO':

	SELECT *
	FROM produto
	WHERE produto_preco < 20
	AND ue_produto_cod IN (SELECT ue_produto_cod FROM ue_produto
				WHERE ue_produto_descr = 'FEIJAO'
				OR ue_produto_descr = 'LEITE');

=======================================================================================================================

Selecionando todos os produtos cujo preco seja menor que 3, incluindo os produtos cujo preço esteja nulo:

	SELECT *
	FROM produto
	WHERE produto_preco < 3 OR produto_preco is null;

=======================================================================================================================

Selecionando todos os produtos por ordem de nome ascendente e valor descendente

	SELECT *
	FROM produto
	ORDER BY produto_nome ASC, produto_preco DESC;

=======================================================================================================================

Selecionando código do cliente, nome do cliente e data de entrada dos pedidos por ordem
descendente de data de entrada, usando aliases:

	SELECT t1.cliente_id, t1.cliente_nome, t2.pedido_data_entrada
	FROM cliente AS t1 JOIN pedido AS t2 using (cliente_id)
	ORDER BY t2.pedido_data_entrada DESC;

=======================================================================================================================

Selecionando o código, o nome dos produtos e o valor total pedido por produto, dos produtos que já
foram pedidos, classificando por nome do produto de forma descendente selecionando somente os itens
cuja soma total pedido por produto seja maior que 80, usando aliases:

	SELECT SUM(t1.item_valor_total) AS ValorTotalPorProduto, t2.produto_nome AS nomeProduto,
	t2.produto_codigo AS produtoCodigo
	FROM item AS t1, produto AS t2
	WHERE t1.produto_codigo = t2.produto_codigo
	GROUP BY produtoCodigo
	HAVING (SELECT SUM(t1.item_valor_total)FROM item as t1) > 80
	ORDER BY nomeProduto DESC;

=======================================================================================================================

Selecionando o código do pedido, e a média de valor dos mesmos, somente para os pedidos cujo valor está acima
da média total, utilizando a cláusula HAVING:

	SELECT pedido_identificacao, AVG(pedido_valor_total) AS valor_medio
	FROM pedido
	GROUP BY pedido_identificacao
	HAVING pedido_valor_total > (SELECT AVG(pedido_valor_total) FROM pedido);

=======================================================================================================================

Selecionando código do pedido, código e nome do cliente, código e nome do produto e descrição 
da unidade de estoque do produto:

	SELECT t1.pedido_identificacao, t2.cliente_id, t3.cliente_nome, t4.produto_nome, t4.ue_produto_cod
	FROM item AS t1, pedido AS t2, cliente AS t3, produto AS t4
	WHERE t1.pedido_identificacao = t2.pedido_identificacao
	AND t2.cliente_id = t3.cliente_id
	AND t1.produto_codigo - t4.produto_codigo;

=======================================================================================================================

Selecionando os produtos que nunca foram comprados por cliente que moram no estado do
"Rio de Janeiro":

	SELECT *
	FROM produto
	WHERE produto_codigo NOT IN
		(SELECT item.produto_codigo
		FROM item, pedido, cliente
		WHERE item.pedido_identificacao = pedido.pedido_identificacao
		AND pedido.cliente_id = cliente.cliente_id
		AND cliente.estado_codigo = 'RJ');
		